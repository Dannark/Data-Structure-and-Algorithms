# -*- coding: utf-8 -*-
"""Largest Continuous Sum.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oYbOWHDKKRyP3AkhohaVPQ1lHngeLMZF
"""

def large_cont_sum(arr): 
  if len(arr) == 0:
    return 0

  sum = largest_sum = arr[0]

  current_point =0
  last_point = 0

  for n in arr[1:]:
    sum += n
    
    if sum > largest_sum:
      largest_sum = sum
    elif sum < 0:
      sum = 0 #this is wrong because it could be negative as well

  return largest_sum

large_cont_sum([1,2,-1,3,4,10,10,-10,-1])

# best solution

def large_cont_sum2(arr): 
  if len(arr) == 0:
    return 0

  max_sum = current_sum = arr[0]

  for num in arr[1:]:
    current_sum = max(current_sum + num, num)

    max_sum = max(current_sum, max_sum)

  return max_sum

large_cont_sum2([1,2,-1,3,4,10,10,-10,-1])

# pip install nose
# test cases

from nose.tools import assert_equal

class LargeContTest(object):
    def test(self,sol):
        assert_equal(sol([1,2,-1,3,4,-1]),9)
        assert_equal(sol([1,2,-1,3,4,10,10,-10,-1]),29)
        assert_equal(sol([-1,1]),1)
        print ('ALL TEST CASES PASSED')
        
#Run Test
t = LargeContTest()
t.test(large_cont_sum2)