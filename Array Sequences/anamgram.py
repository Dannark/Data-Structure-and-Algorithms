# -*- coding: utf-8 -*-
"""Anamgram.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RcWMLFXL6qwGIg-H2EptuCFLdKiWxSel
"""

# Check if strings are anagrams (My version)
# This is a O(n) algorithim

def isAnagram(s1, s2):
  letters1 = {}
  letters2 = {}

  s1 = s1.lower().replace(' ','')
  s2 = s2.lower().replace(' ','')
  
  if len(s1) != len(s2):
    return False

  for c in s1:
    if not c in letters1:
      letters1[c] = 0
    letters1[c] += 1

  for c in s2:
    if not c in letters2:
      letters2[c] = 0
    letters2[c] += 1
  
  return letters1 == letters2

s1 = 'Banana'
s2 = s1[::-1]

Solution().isAnagram('abc d', 'cdba')

# Easiest but not the fastiest Solution
def isAnagram2(s1, s2):
  s1 = s1.replace(' ', '').lower()
  s2 = s2.replace(' ', '').lower()
  return sorted(s1) == sorted(s2)

isAnagram2(s1, s2)

"""
RUN THIS CELL TO TEST YOUR SOLUTION
"""
from nose.tools import assert_equal

class AnagramTest(object):
    
    def test(self,sol):
        assert_equal(sol('go go go','gggooo'),True)
        assert_equal(sol('abc','cba'),True)
        assert_equal(sol('hi man','hi     man'),True)
        assert_equal(sol('aabbcc','aabbc'),False)
        assert_equal(sol('123','1 2'),False)
        print ("ALL TEST CASES PASSED")

# Run Tests
t = AnagramTest()
t.test(isAnagram)