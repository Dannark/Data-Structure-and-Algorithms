# -*- coding: utf-8 -*-
"""Fibonacci.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LHQ-xxY1NaTBL4jCeBWsRSbSXdi_PnSW
"""

# Commented out IPython magic to ensure Python compatibility.
def fib(n):
  # Base Case
  if n <= 1:
    return n
  else:
    r = fib(n - 1) + fib(n - 2)
    return r

# %timeit fib(10)

# Commented out IPython magic to ensure Python compatibility.
#using memoization technique
n = 10

cache = [None] * (n + 1)

def fib_dyn(n):
  global cache

  # edge case
  if len(cache) < n:
    print('re caching')
    cache = [None] * (n + 1)
  
  # Base Case
  if n <= 1:
    return n
  elif cache[n] != None:
    return cache[n]
  else:
    r = fib_dyn(n - 1) + fib_dyn(n - 2)
    cache[n] = r
    return r

fib_dyn(n)
# %timeit fib_dyn(n)

# Commented out IPython magic to ensure Python compatibility.
def fib_iter(n):
  a,b = 0,1

  for i in range(n):
    a,b = b, a+b

  return a

# %timeit fib_iter(10)