# -*- coding: utf-8 -*-
"""Permutation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u3Z4cUjHMJ9aQ5J_SWJCing-hHLh33uG
"""

def permute(s):
  out = []

  if len(s) == 1:
    out = [s]
  else:

    for i, letter in enumerate(s):
      for perm in permute(s[:i] + s[i+1:]):
        out += [letter+perm]
  return out

permute('abc')

def permute(s, start = 0):
  if start == len(s)-1:
    return [s]
  
  l = list(s)
  out = []
  for i in range(start, len(s)):
    l[start], l[i] = l[i], l[start]
    out += permute(''.join(l), start + 1)
    l[start], l[i] = l[i], l[start]

  return out

permute('abc')

def permute(s, value = ''):
  
  # Base Case
  if not s:
    return [value]
  out = []
  for i in range(len(s)):
    t = permute(s[:i] + s[i+1:], value + s[i])
    out += t
  return out
    

permute('abc')

#     a         b         c
#    / \       / \       / \
#   b   c     c   a     b   a
#  /     \   /     \   /     \
# c       b a       c a       b